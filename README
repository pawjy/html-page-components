HTML page components
~~~~~~~~~~~~~~~~~~~~

* Files

The |src/page-components.js| file implements elements described in
this document.

The |css/default.css| file describes the default style for these
elements.  Though the file itself is not required to be loaded itself,
some of style rules in the file are effectively required for these
elements rendered as intended.

  <link rel=stylesheet href=css/default.css>
  <script src=src/page-components.js async></script>

* Elements

Following elements and API are available once the script has been
loaded:

** <button is=command-button>

A |button| element whose |is| attribute value is |command-button|
represents a command button.  (Be aware that this implementation does
not support mutation of |is| attribute; it must be set to a value
before the element's insertion into the document.)

The element must has a |data-selector| attribute.  Its value is a
group of selectors that selects an element in the document.

The element must has a |data-command| attribute whose value is the
name of the command.

When the element is clicked, the command specified by the
|data-command| attribute value of the element selected by the
|data-selector| attribute value is invoked.

A command whose name is /name/ for element /element/ can be defined by
setting these two values:

  element.cbCommands[name]   An object.  It can have any property.
  element[name]  A function.  This is the method implementing the command.

** <list-container>

A |list-container| element represents a dynamic list of items.  Its
content model is transparent.

A |list-container| element has a *list*, which is a list of JavaScript
objects.  The list can be constructed by a loader.  A *loader* is a
handler with type |pc-handler|.  The loader used by a |list-container|
element can be specified by the |loader| attribute value.  The default
loader's name is |src|.

The first |list-main| element descendant of a |list-container| element
is the *list item insertion point* of the |list-container| element.
When the |list-container| element is *rendered*, any child of the list
item insertion point is discarded and the elements created from the
items of the list of the element are inserted into the list item
insertion point.

An element is created from a list item by creating a |list-item|
element, appending a deep clone of the template content of the
selected template of the |list-container| element, and then |$fill| is
invoked with the |list-item| element and the list item.  The selected
template of the |list-container| element is the first |template|
element descendant of the |list-container| element.

A |list-container| element is rendered when the element is inserted
and has |list-main| element and |template| element descendants, or
when a |list-main| or |template| element descendant is inserted.

** <image-editor>

An |image-editor| element represents an editable image.  Its content
can be one or more |image-layer| elements, representing layers in the
image.  The order of child elements (in tree order) is the layers'
compound order, where an earlier element has smaller z-index.

A *layer* can be an image or a placeholder (which is a transparent
image for the purpose of composition).  A layer has *natural width*,
*natural height*, and *scale factor*.  A |canvas| element is inserted
into a |image-layer| element.  A layer's *computed width* and
*computed height* are natural width and natural height multiplied by
scale factor, respectively.  Layeres are rendered within the image
using computed width and computed height.

Initially, a layer is a placeholder.  The |placeholder| class is set
to the element while it is a placeholder.  If a placeholder layer has
a |useplaceholderui| attribute specified, the user can click the
element to open a user interface to set a image (i.e. manually
invoking the |selectImageFromFile| method).  In addition, the user can
drop an image file to the element to set the image.  When the user is
dragging an image file over the element, the |drop-target| class is
set to the element.

When a layer is *set* to an image, its natural width and natural
height are set to the image's width and height, respectively, and its
scale factor is set to 1.

A layer has *left* and *top*, which are offsets from the left and top
edges of the parent |image-editor| element, respectively.  They are
both initially set to zero.  If a |movable| attribute is specified to
an |image-layer| element, the layer is *movable*.  If a layer is
movable, its left and top can be modified by dragging the layer, or
using keyboard arrow keys.

A layer has an *anchor point*.  Initially, the anchor point of a layer
is the top left corner of the layer.  If an |anchorpoint| attribute is
set to |center|, the anchor point of a layer is the center of the
layer both horizontally and vertically.  When a layer is set to an
image, the layer's left and top are modified appropriately such that
the anchor point of the layer in the parent |image-editor| element is
preserved.

An |image-editor| element has *width* and *height*.  An |image-editor|
element can have |width| and |height| content attributes, whose values
must be valid floating-point numbers representing width and height in
pixels, respectively.  If specified, they set width and height of the
element and they are not affected by layers' dimension.  Otherwise,
the width is set to the offset of the rightmost layer's right edge
from the left edge of the element and the height is set to the offset
of the bottommost layer's bottom edge from the top edge of the
element.

An |image-editor| element has these object properties:

  height (read-only)

    The element's height, in pixels.

  width (read-only)

    The element's width, in pixels.

An |image-editor| element has these methods:

  getPNGBlob () : Promise

    Serializes the element as a PNG file.  It returns a promise which
    is fulfilled with a Blob of that file.

  getJPEGBlob () : Promise

    Serializes the element as a JPEG file.  It returns a promise which
    is fulfilled with a Blob of that file.

An |image-layer| element has these object properties:

  left (read-only)

    The layer's left, in pixels.

  top (read-only)

    The layer's top, in pixels.

  height (read-only)

    The layer's computed height, in pixels.

  width (read-only)

    The layer's computed width, in pixels.

An |image-layer| element has these methods:

  selectImageByURL (url : String) : Promise

    Set the layer to an image specified by the URL /url/.  It returns
    a promise which is fulfilled once the image has been loaded.  It
    is rejected if the image cannot be loaded.

  selectImageFromFile () : Promise

    Set the layer to an image for the element by showing a user
    interface to choose a file.  It returns a promise which is
    fulfilled once the image has been loaded.  It is rejected if the
    image cannot be loaded.  This is a |command-button| command.

  startCaptureMode ()

    Starts the element's *camera capture mode*, if not yet and if
    possible.  While the element is in the camera capture mode, a
    |video| element with class |capture| is inserted in the element.
    This is a |command-button| command.

  endCaptureMode ()

    Ends the element's camera capture mode, if the element is in that
    mode.  This is a |command-button| command.

  selectImageFromCaptureModeAndEndCaptureMode () : Promise

    Set the layer to the current snapshot of the camera image.  It
    returns a promise which is fulfilled once the image has been
    loaded.  It is rejected if the image cannot be loaded.  It
    implicitly invokes |endCaptureMode|.  This is a |command-button|
    command.

  rotateClockwise ()

    Set the layer to the result of rotation of the layer π/2 radian
    clockwise.  This is a |command-button| command.

  rotateCounterclockwise ()

    Set the layer to the result of rotation of the layer 3π/2 radian
    clockwise.  This is a |command-button| command.

  setScale (number)

    Set the scale factor of the layer to the argument and set the
    layer to the scaled variant of the layer.

The |resize| event is fired at an |image-editor| or |image-layer|
element when it is initialized and whenever the its width or height
has been changed.

The |change| event is fired at an |image-layer| element when the
element is initialized and whenever the layer is set to a new image or
placeholder.

* Exportable function

By setting the |data-export| attribute of the |script| element loading
the |page-components.js| to a space-separated list of the function
names, the functions can be exported to the global scope.  The
following function is available:

  $fill (root, object)

    Edit any descendant of /root/ with the following conditions:

      An element with |data-field| attribute

        Replace the value of the element by the field value specified
        by the |data-field| attribute.

        For the purpose of this function the *value* of an element
        /element/ is determined by the
        |window.pcFillType[element.localName]|:

          |contentattribute|

            The value of /element/ is the |value| content attribute
            value of /element/, if specified, or |null|.

          |idlattribute|

            The value of /element/ is the |value| IDL attribute value
            of /element/.

            |input|, |select|, |textarea|, and |output| elements are
             set to this mode.

          |datetime|

            The value of /element/ is the |datetime| attribute value
            and is set to the result of the |new Date (/field value/ *
            1000).toISOString ()|.  If it throws, the |datetime|
            attribute is removed and the |textContent| is set to the
            exception.

            In other words, the field value is expected to be a Unix
            time number and the |datetime| attribute is set to its
            global date and time string equivalent.

            Note that the |textContent| of /element/ is not updated
            when the |datetime| attribute value is changed.  It should
            be handled by another JavaScript codes, such as time.js
            <https://github.com/wakaba/timejs>.

            |time| element is set to this mode.

          Any other value

            The |textContent| IDL attribute value of /element/.

      An element with data-/*/-field attribute

        ... where /*/ is the *target attribute name* and is one of:
        |href|, |src|, |id|, |title|

        The attribute whose name is the target attribute name is set
        to the field value for the |data-/*/-field| attribute value.
        If the field value is |null| or |undefined|, the attribute
        whose name is the target attribute name is removed instead.

        For example,

          <a data-href-field=link data-field=title></a>

        ... with /object/:

          {
            link: "https://example.com/",
            title: "Example Web Page",
          }

        ... is expanded as:

          <a data-href-field=link data-field=title
              href="https://example.com/">Example Web Page</a>

      An element with data-/*/-template attribute

        ... where /*/ is the *target attribute name* and is one of:
        |href|, |src|, |id|, |title|

        The attribute whose name is the target attribute name is set
        to the result of processing the |data-/*/-template| attribute
        value as a value template.

        For example,

          <a data-href-template=https://example.com/{user_id}/{object_id}>

        ... with /object/:

          {
            user_id: 535555,
            object_id: 72534151,
          }

        ... is expanded as:

          <a data-href-template=https://example.com/{user_id}/{object_id}
              href="https://example.com/535555/72534151">

    The *field value* for /field/ is the /field/ property value of
    /object/.  If /field/ contains a |.| character, the substring
    before the character is the property value and the remaining
    substring is interpreted as the field value recursively applied to
    that property value (If the property value is |null| or
    |undefined|, the result is |null|).  For example, field value for
    |abc.def.xyz| is the value of |object.abc.def.xyz|.

    The result of processing a value template /template/ is a copy of
    /template/ where any substring |{/field-name/}| is replaced by the
    field value for /field-name/.

* Handlers

A handler can be defined by inserting an element whose local name is
handler type into the head element of the document.

The *handler type* is |pc-loader|, which defines a handler for
|list-container| element's loader.

The element must have a |name| attribute, whose value is the *handler
name*.  The handler name must be unique.  Predefined handler names
cannot be used as a |name| attribute value.

The element must have a |pcHandler| property whose value is a
JavaScript function.  This function is invoked when the handler is
said to be *invoked*.

A handler cannot be removed.

* Author

Wakaba <wakaba@suikawiki.org>.

* License

Copyright 2017 Wakaba <wakaba@suikawiki.org>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Affero General Public License for more details.

You does not have received a copy of the GNU Affero General Public
License along with this program, see <https://www.gnu.org/licenses/>.
