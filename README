HTML page components
~~~~~~~~~~~~~~~~~~~~

* Files

The |src/page-components.js| file implements most elements described
in this document.

The |src/maps.js| file implements some elements described in this
document.

The |css/default.css| file describes the default style for these
elements.  Though the file itself is not required to be loaded itself,
some of style rules in the file are effectively required for these
elements rendered as intended.  It only has minumum rules to render
the elements implemented by the scripts.  Additional
application-specific style rules are expected to be added to the
application's style sheet such that the elements are rendered
prettily.

  <link rel=stylesheet href=css/default.css>
  <script src=src/page-components.js async></script>

* Elements

Following elements and API are available once the script has been
loaded:

  <enum-value>
  <button is=command-button>
  <button is=mode-button>
  <popup-menu>
  <tab-set>
  <list-container>
  <form is=save-data>
  <image-editor>
  <template-set>

The following element is defined in another script file:

  <map-area>

** <enum-value>

An |enum-value| element represents one of possible values.

The element may have a |value| content attribute, whose value
represents the element's *value*.  If there is no element specified,
the element's value is |null|.

The element's |hidden| content attribute is set when the element's
value is |null|.  Otherwise the attribute is not set.

When the element's value is not |null|, the element's |textContent|
IDL attribute is set to the element's label text.  The element's label
text is the element's |label-/value/| content attribute value, where
/value/ is the element's value.  If there is no such attribute, the
element's label text is the element's value.

** <button is=command-button>

A |button| element whose |is| attribute value is |command-button|
represents a command button.  (Be aware that this implementation does
not support mutation of |is| attribute; it must be set to a value
before the element's insertion into the document.)

The element must have a |data-selector| attribute.  Its value is a
group of selectors that selects an element in the document.

The element must have a |data-command| attribute whose value is the
name of the command.

When the element is clicked, the command specified by the
|data-command| attribute value of the element selected by the
|data-selector| attribute value is invoked.

A command whose name is /name/ for element /element/ can be defined by
setting these two values:

  element.cbCommands[name]   An object.  It can have any property.
  element[name]  A function.  This is the method implementing the command.

** <button is=mode-button>

A |button| element whose |is| attribute value is |mode-button|
represents one of buttons used to select modes of another element.
(Be aware that this implementation does not support mutation of |is|
attribute; it must be set to a value before the element's insertion
into the document.)

The element must have a |data-selector| attribute.  Its value is a
group of selectors that selects an element in the document.

The element must have a |name| attribute.  Its value is the name of
the mode (i.e. one of the property names for the element selected by
the |data-selector| attribute value).

The element must have a |value| attribute.  Its value is the value of
the mode (i.e. the property value for the property identified by the
|name| attribute value).

The |selected| class is added to the element when the mode is set to
the value equals to the |value| attribute value, and is removed when
the mode is set to another value.

The element selected by the |data-selector| attribute is expected to
be fired a bubbling |pcModeChange| event whose |mode| property is set
to the value equal to the |name| attribute value when a new mode value
is set.

** <popup-menu>

A |popup-menu| element represents a button with popup-menu.  Its
content must be a |button| element followed by a |menu-main| element.

The |button| element child, if any, represents the button which is
associated with a popup menu.  Its |type| attribute should be in the
Button state (i.e. |<button type=button>|).

The |menu-main| element child, if any, represents the popuped menu.
Its content model is phrasing content if any |popup-menu| parent is a
phrasing content, flow content otherwise.

The |open| content attribute of the |popup-menu| element is a boolean
attribute.  It represents whether the popup menu is shown or not.  If
specified, the popup menu, if any, is shown.

A |popup-menu| element has the following method:

  toggle

    If no argument is specified, change whether the element has an
    |open| attribute or not.

    If the argument is true, set the |open| attribute of the element,
    if not yet.

    If the argument is false, remove the |open| attribute of the
    element, if any.

Clicking the |button| element child is equivalent to invoking the
|popup-menu| element's |toggle| method.

While the popup menu is open, clicking outside of the |popup-menu|
element is equivalent to invoking the |toggle| method with argument
false.

Clicking a |button| or |a| element descendant of the |menu-main|
element is equivalent to invoking the |toggle| method with argument
false (unless the |click| event's propagation has been stopped).

** <tab-set>

A |tab-set| element represents a set of sections where one of them are
expected to be shown at once and can be switched by user's direction.
Its content model is a |tab-menu| element followed by one or more
|section| elements.

The |tab-menu| child element, if any, represents the menu the user can
select the section to show.  Its content is set to the list of the
anchors corresponding to the sections in the set.

The |section| child elements represent the sections of the set.  A
|section| element should have a |h1| element descendant, which labels
the section.  The content of that element is used as the label of the
anchor corresponding to the section in the menu.

If there is one or more sections in a set, one of them is selected at
a time.  The selected section has the class |active|.  The anchor in
the menu corresponding to the selected section also has the class
|active|.  No other section or anchor in the menu has the class
|active|.

By default the first section is selected.

Whenever a section is selected, a bubbling |show| event is fired at
the selected section.

** <list-container>

A |list-container| element represents a dynamic list of items.  Its
content model is transparent.

A |list-container| element has a *list*, which is a list of JavaScript
objects.  The list is constructed by the following steps:

  1. Loader.  The loader whose name is equal to the |loader| attribute
     value, whose default is |src|, is invoked for the element with
     the argument of the load options.  A *loader* is a definition of
     type |loader|.  A loader is expected to prepare the list data
     (e.g. by fetching from the server).  Note that a loader might
     depend on the content attributes of the |list-container| element
     (e.g. the |src| loader depends on the |src| and |key|
     attributes).  While a loader is running, the action status stage
     is set to |loader|.

  2. Filter.  The filter whose name is equal to the |filter| attribute
     value, whose default is |default|, is invoked for the element
     with the argument of the result of the loader.  A *filter* is a
     definition of type |filter|.  A filter is expected to mutate the
     loaded data to the structure interpretable as list data.  While a
     filter is running, the action status stage is set to |filter|.

  3. The result of the filter is expected to be a *list description
     object*, which is a JavaScript object with following name/value
     pairs:

       data

         The list, as a JavaScript array.  This value is required.  If
         there is no object, an empty array should be specified.

       next, prev

         An object on the next or previous "page", with following
         name/value pairs:

           ref

             An opaque string to identify the page.

           has

             Whether there is the page or not.

           append, prepend

             Whether the page should be appended or prepended to the
             current list or not.  At most one of them can be set to
             true.  If none is set to true, the current list is
             cleared and then the new list items are inserted.

A |list-container| element has at most one *list item insertion
point*.  If the |list-container| element's |type| attribute value, if
specified, is |table|, the first |tbody| element descendant of the
|list-container| element is the list item insertion point.  Otherwise,
the first |list-main| element descendant of the |list-container|
element is the list item insertion point.  When the |list-container|
element is *rendered*, any child of the list item insertion point is
discarded and the item elements created from the items of the list of
the element using the selected template of the |list-container|
element are inserted into the list item insertion point.  The
|list-container| elements support templates.  An item element is a
|tr| element if the list item insertion point is a |tbody| element, or
the |list-item| element otherwise.

A |list-container| element is rendered when the element is inserted
and has list item insertion point and selected template, or when a
list item insertion point, selected template, or pager button
descendant is inserted.

After a |list-container| element is rendered, a |pcRendered| event,
which bubbles, is fired at the |list-container| element.

A *pager button* is a next page button or a previous page button.  A
*next page button* is an |a| or |button| element which has a
|list-next| class.  A *previous page button* is an |a| or |button|
element which has a |list-prev| class.  A page button's |hidden|
attribute is set or removed appropriately, according to whether there
is the next or previous page or not.  When a page button is clicked,
the list is updated to inculude the previous or next page
appropriately and the |list-container| element is rendered.

A |list-container| element can contain |list-is-empty| element
descendants.  The content model of a |list-is-empty| element is
transparent.  Whenever the |list-container| element is rendered, the
|list-is-empty| element descendants' |hidden| attributes are updated
such that they are hidden if the |list-container| element's list has
one or more list items.

A |list-container| element has following members:

  load ({})

    Load and render the list data.  The argument must be an empty
    object.  This method is implicitly invoked when the element is
    initialized.  It can also be invoked when the list should be
    reloaded.

  loadNext ()

    Load and render the next page.  This is equivalent to clicking a
    next page button.

  loadPrev ()

    Load and render the previous page.  This is equivalent to clicking
    a previous page button.

  loaded : Promise

    When the |load| method is invoked, this property value is set to a
    new promise.  The promise is fulfilled when the load is completed.

The |list-container| element supports action statuses.

** <form is=save-data>

A |form| element whose |is| attribute is |save-data| represents a form
used to submit data using HTTP |POST| method and |multipart/form-data|
MIME type.

As usual, the data is submitted to the |form| element's |action|
attribute's URL.  It must be same origin as the current document,
otherwise no credentials and referrer and origin headers are sent.
Any of |method|, |enctype|, and |target| attribute is ignored, but the
|method| attribute should be set to |POST| and the |enctype|
attribute, if specified, should be set to |multipart/form-data| to
provide better fallback story for environments where scripting is
disabled.  Note that these behaviors can be overriden by specifying a
saver using the |data-saver| attribute.

If the element has a |data-confirm| attribute specified, a confirm
dialog box whose text is the attribute value is shown and the user can
cancel the submission.

If the element has a |data-validator| attribute specified, custom form
validators specified by the attribute are invoked before the
submission.  A *custom form validator* is a definition of type
|formvalidator|.  The custom form validator for an element can be
specified in the |data-validator| attribute as a space-separated list
of custom form validator names.  If multiple custom form validators
are specified for an element, they are invoked in order.  A custom
form validator is invoked with a dictionary argument with following
member:

  formData : FormData

    A |FormData| that is to be submitted.  This object can be examined
    by the custom form validator.

Once the response to the submission is received, instead of navigation
to the response as in usual forms, any formsaved handler for the
element is invoked.  A *formsaved handler* is a definition of type
|formsaved|.  The formsaved actions for an element can be specified in
the |data-next| attribute as a space-separated list of formsaved
handler names (with optional arguments).  If multiple formsaved
handlers are specified for an element, they are invoked in order.  A
formsaved handler is invoked with a dictionary argument with following
members:

  args : Array

    An |Array| of the formsaved handler name and optional arguments.
    The handler name and arguments can be specified in the |data-next|
    attribute as a |:|-separated string.  The first component (before
    first |:| character) is considered as the handler name and any
    other component is considered as arguments.  All of them are
    provided in this array, in order.

  response : Response

    The |Response| for the form submission's response.

  json : Function<Promise<Object>>

    When invoked, return the result of the |response|'s |json| method.
    Unlike the direct invocation of the |response.json| method, the
    result is cached in this method such that multiple invocations
    would not reject.

During the form submission (since just before the start of the custom
validations and fetch, until the completion of any formsaved
handlers), any form control is disabled.

In addition to HTML's standard form control elements, autonomous
custom elements can be defined as form controls for the purpose of
this element's form submission by setting the |formcontrol| content
attribute.  Such custom form controls must have |pcModifyFormData|
method at the time of form submission.  The method is invoked with a
|FormData| object.  The method is expected to append name/value
pair(s) to the object before the method is returned (or the promise
returned by the method is fulfilled).  The method can throw (or return
a promise which is rejected) when the custom form control is
considered as invalid.  The custom form control element is expected to
be disabled by setting the |disabled| content attribute.

The |form| content attribute of form controls are not supported.

The saver for the element can be specified by setting the saver's name
to the |data-saver| attribute of the element.  A *saver* is a
definition of type |saver|.  The saver is invoked with the |FormData|
object representing the form data that should be submitted.  It is
expected to return a |Response| object (or an object whose API is
compatible with |Response|), or a promise which is fulfilled with such
an object.  If it cannot be saved the data, it is expected to throw
(or return a promise which is rejected).  While a saver is running,
the action status stage is set to |saver|.

The |form| element whose |is| attribute is |save-data| supports action
statuses.

** <image-editor>

An |image-editor| element represents an editable image.  Its content
can be one or more |image-layer| elements, representing layers in the
image.  The order of child elements (in tree order) is the layers'
compound order, where an earlier element has smaller z-index.

A *layer* can be an image or a placeholder (which is a transparent
image for the purpose of composition).  A layer has *natural width*,
*natural height*, and *scale factor*.  A |canvas| element is inserted
into a |image-layer| element.  A layer's *computed width* and
*computed height* are natural width and natural height multiplied by
scale factor, respectively.  Layeres are rendered within the image
using computed width and computed height.

Initially, a layer is a placeholder.  The |placeholder| class is set
to the element while it is a placeholder.  If a placeholder layer has
a |useplaceholderui| attribute specified, the user can click the
element to open a user interface to set a image (i.e. manually
invoking the |selectImageFromFile| method).  In addition, the user can
drop an image file to the element to set the image.  When the user is
dragging an image file over the element, the |drop-target| class is
set to the element.  When the user-selected file cannot be loaded as a
valid image, a bubbling |error| event is dispatched at the layer whose
|exception| property is set to the exception representing the
image-loading error.

When a layer is *set* to an image, its natural width and natural
height are set to the image's width and height, respectively, and its
scale factor is set to 1.

A layer has *left* and *top*, which are offsets from the left and top
edges of the parent |image-editor| element, respectively.  They are
both initially set to zero.  If a |movable| attribute is specified to
an |image-layer| element, the layer is *movable*.  If a layer is
movable, its left and top can be modified by dragging the layer, or
using keyboard arrow keys.

A layer has an *anchor point*.  Initially, the anchor point of a layer
is the top left corner of the layer.  If an |anchorpoint| attribute is
set to |center|, the anchor point of a layer is the center of the
layer both horizontally and vertically.  When a layer is set to an
image, the layer's left and top are modified appropriately such that
the anchor point of the layer in the parent |image-editor| element is
preserved.

An |image-editor| element has *width* and *height*.  An |image-editor|
element can have |width| and |height| content attributes, whose values
must be valid floating-point numbers representing width and height in
pixels, respectively.  If specified, they set width and height of the
element and they are not affected by layers' dimension.  Otherwise,
the width is set to the offset of the rightmost layer's right edge
from the left edge of the element and the height is set to the offset
of the bottommost layer's bottom edge from the top edge of the
element.

An |image-editor| element has these object properties:

  height (read-only)

    The element's height, in pixels.

  width (read-only)

    The element's width, in pixels.

An |image-editor| element has these methods:

  getPNGBlob () : Promise

    Serializes the element as a PNG file.  It returns a promise which
    is fulfilled with a Blob of that file.

  getJPEGBlob () : Promise

    Serializes the element as a JPEG file.  It returns a promise which
    is fulfilled with a Blob of that file.

An |image-layer| element has these object properties:

  left (read-only)

    The layer's left, in pixels.

  top (read-only)

    The layer's top, in pixels.

  height (read-only)

    The layer's computed height, in pixels.

  width (read-only)

    The layer's computed width, in pixels.

An |image-layer| element has these methods:

  selectImageByURL (url : String) : Promise

    Set the layer to an image specified by the URL /url/.  It returns
    a promise which is fulfilled once the image has been loaded.  It
    is rejected if the image cannot be loaded.

  selectImageFromFile () : Promise

    Set the layer to an image for the element by showing a user
    interface to choose a file.  It returns a promise which is
    fulfilled once the image has been loaded.  It is rejected if the
    image cannot be loaded.  This is a |command-button| command.

  startCaptureMode ()

    Starts the element's *camera capture mode*, if not yet and if
    possible.  While the element is in the camera capture mode, a
    |video| element with class |capture| is inserted in the element.
    This is a |command-button| command.

  endCaptureMode ()

    Ends the element's camera capture mode, if the element is in that
    mode.  This is a |command-button| command.

  selectImageFromCaptureModeAndEndCaptureMode () : Promise

    Set the layer to the current snapshot of the camera image.  It
    returns a promise which is fulfilled once the image has been
    loaded.  It is rejected if the image cannot be loaded.  It
    implicitly invokes |endCaptureMode|.  This is a |command-button|
    command.

  rotateClockwise ()

    Set the layer to the result of rotation of the layer π/2 radian
    clockwise.  This is a |command-button| command.

  rotateCounterclockwise ()

    Set the layer to the result of rotation of the layer 3π/2 radian
    clockwise.  This is a |command-button| command.

  setScale (number)

    Set the scale factor of the layer to the argument and set the
    layer to the scaled variant of the layer.

The |resize| event is fired at an |image-editor| or |image-layer|
element when it is initialized and whenever the its width or height
has been changed.

The |pcImageSelect| event is fired at an |image-layer| element when an
image is set for the element.  The event object has the |element|
property, whose value is an element which contains the image, if any.
It can be an |HTMLImageElement| or |HTMLVideoElement|.  Future version
of this script might also use another kinds of elements.  This is a
hook that can be used for e.g. extracting Exif metadata from the image
data.

The |change| event is fired at an |image-layer| element when the
element is initialized and whenever the layer is set to a new image or
placeholder.

** <template-set>

A |template-set| element is a set of template.  The element itself
represents nothing.  Its content model is one or more |template|
elements.

A |template-set| element must have a |name| attribute, whose name
identifies the set.  The |name| attribute value must be unique within
the tree.

A *template set* can be defined explicitly by a |template-set|
element, or implicitly by an element which *supports templates*.  If
an element that supports template has the |template| attribute, the
template set of the element is the |template-set| element whose name
is the |template| attribute value.  Otherwise, if the element has no
|template| attribute, the element itself is the template set.

The *template map* of a template set is a map whose values are the
|template| element children of the template set.  Their names are the
|data-name| attribute value of the value's |template| element, if
specified, or the empty string.  The |data-name| attribute value (or
the empty string, if not specified) must be unique in the template
set.

The *selected template* for an element is a |template| element chosen
by the template selector specified by the |templateselector| attribute
of the template set (whose default is |default|).  A *template
selector* is a definition of type |templateselector|.  A template
selector is expected to choose a template from the template map.

  For example, in the fragment:

    <list-container>
      <template></template>
    </list-container>

  ... the |list-container| element's tempalte set is the element
  itself and the |template| element child is the selected template.

  In the fragment:

    <list-container template=set1>
    </list-container>
    <template-set name=set1>
      <template></template>
    </template-set>

  ... the |list-container| element's tempalte set is the
  |template-set| element and the |template| element child of the
  |template-set| is the selected template.

When a /name/ element is created from an /object/ using /template/,

  - Its |data-requires| attribute value is interpreted as a
    space-separated list of the definition type-name pair separated by
    |:| required to process the template.

  - Its |class| attribute value is set to the |class| attribute value
    of /template/.

  - Its content is set to a deep clone of the template content of
    /template/.

  - The |$fill| function is invoked with it and /object/.

For example, a template:

  <template data-requires=filltype:unit-number>
    <unit-number type=distance data-field=from-station></unit-number>
  </template>

... will be processed after the |filltype| definition for name
|unit-number| is loaded.

** <map-area>

The |map-area| element represents a map.  Its content model is empty.

To enable this element, the |maps.js| script must be loaded in
addition to the main script:

  <script src=js/maps.js async data-google-maps-key=...></script>

The following content attributes are available:

  engine = googlemaps | googlemapsembed

    The engine used to render the map.  If this content attribute is
    not explicitly specified, one of available engines is chosen.
    Applications should not rely on the default.  Following engines
    are available:

      googlemaps

        Google Maps, using the Google Maps JavaScript API.  If this
        engine is used, the API key for the API must be specified to
        the |data-google-maps-key| attribute value of the root element
        (the |html| element).  If there is the
        |data-google-maps-libraries| attribute for the root element,
        its value is used as the |libraries| parameter to the Google
        Maps API.

      googlemapsembed

        Google Maps, using the Google Maps Embed API.  If this engine
        is used, the API key for the API must be specified to the
        |data-google-maps-key| attribute value of the root element
        (the |html| element).

  lat (float)

    The initial latitude of the center point of the map.  The default
    is zero.

  lon (float)

    The initial longitude of the center point of the map.  The default
    is zero.

  gsi

    Whether map type GSI is enabled or not.  The map type GSI shows
    the 地理院タイル (GSI Tile)
    <https://maps.gsi.go.jp/development/ichiran.html> map data
    provided by 国土地理院 (Geospatial Information Authority of Japan)
    <http://www.gsi.go.jp/> of the Japanese Government.

    If the content attribute is NOT specified, the GSI map is not
    enabled.  Otherwise, if non-empty attribute value is string, it is
    used as the label of the button to switch to the GSI map type.
    Otherwise, if the empty value is specified, the default label is
    used.

    When the map type GSI is selected, a |map-credit| element whose
    content is a link to the GSI Web site is displayed as the credit
    of the GSI Tile, as required by GSI.  This element and its content
    can be styled using CSS.

    This attribute is ignored unless the |engine| is |googlemaps|.

  gsititle (string)

    The short description of the GSI map type, used as the tooltip of
    the button to switch to the GSI map type.  If not specified, the
    default text is used.  This content attribute is ignored if the
    |gsi| content attribute is NOT specified.

  noimgsrc (URL)

    The (absolute or relative) URL of the image that is used when no
    image data is available.  If not specified, the default image is
    used.  This is applied to GSI maps.

The following properties are available:

  ready (promise)

    The promise which is fulfilled after the initialization of the
    element.

  getMapCenter ()

    Returns the center of the map of the element at the time of the
    invocation.  The returned value is an object whose |lat| is the
    latitude as a number and |lon| is the longitude as a number.

    This method must be invoked after the initialization; otherwise
    the method returns |null|.

  getMapBounds ()

    Returns the bounds of the map of the element at the time of the
    invocation.  The returned value is an object whose |north| is the
    latitude of the northmost edge of the map, |east| is the longitude
    of the eastmost edge of the map, |south| is the latitude of the
    southmost edge of the map, and |west| is the longitude of the
    westmost edge of the map.

    This method must be invoked after the initialization; otherwise
    the method returns |null|.

    This method returns |null| unless the |engine| is |googlemaps|.

  googleMap

    The Google Maps API's |google.maps.Map| object of the map of the
    element.  If the element's map is not a Google Maps API's map, an
    exception is thrown.

    This property getter must be invoked after the initialization;
    otherwise the property getter returns |null|.
    
    This property returns |null| unless the |engine| is |googlemaps|.

  maGoogleMapTypeGSI : String

    The identifier of the GSI map type, that can be used in Google
    Maps API when the |gsi| content attribute is specified.

A |pcRedraw| event, which bubbles, is fired at the element when the
map's visible area has been changed; e.g., when the map is
initialized, the map's center has been moved (when |engine| is
|googlemaps|), the zoom level has been changed (when |engine| is
|googlemaps|), the map's dimension has been changed (when |engine| is
|googlemaps|), and so on.  This event can be used as the oppotunity to
relocate map overlay objects or to recalculate any associated data
outside of the map.

* Exportable functions

By setting the |data-export| attribute of the |script| element loading
the |page-components.js| to a space-separated list of the function
namespace names, the function namespaces can be exported to the global
scope.  The following functions are available:

  |$fill| namespace

    $fill (root, object)

      Edit any descendant of /root/ with the following conditions:

        An element with |data-field| attribute

          Replace the value of the element by the field value
          specified by the |data-field| attribute.

          For the purpose of this function the *value* of an element
          /element/ is the definition of type |filltype| for
          /element/'s local name:

            |contentattribute|

              The value of /element/ is the |value| content attribute
              value of /element/, if specified, or |null|.

              |enum-value| elements are set to this mode.

            |idlattribute|

              The value of /element/ is the |value| IDL attribute
              value of /element/.

              |input|, |select|, |textarea|, and |output| elements are
               set to this mode.

            |datetime|

              The value of /element/ is the |datetime| attribute value
              and is set to the result of the |new Date (/field value/
              * 1000).toISOString ()|.  If it throws, the |datetime|
              attribute is removed and the |textContent| is set to the
              exception.

              In other words, the field value is expected to be a Unix
              time number and the |datetime| attribute is set to its
              global date and time string equivalent.

              In addition, if /element/ has the |data-tzoffset-field|
              attribute, the |data-tzoffset| attribute is set the
              field value for the |data-tzoffset-field| attribute
              value.  If the field value is |null| or |undefined|, any
              |data-tzoffset| attribute is removed instead.

              Note that the |textContent| of /element/ is *not*
              updated when the |datetime| attribute value is changed.
              It should be handled by another JavaScript codes, such
              as time.js <https://github.com/wakaba/timejs>.

              |time| element is set to this mode.

            Any other value

              The |textContent| IDL attribute value of /element/.

        An element with |data-/*/-field| attribute

          ... where /*/ is the *target attribute name* and is one of:
          |href|, |src|, |id|, |title|, |value|.

          The attribute whose name is the target attribute name is set
          to the field value for the |data-/*/-field| attribute value.
          If the field value is |null| or |undefined|, the attribute
          whose name is the target attribute name is removed instead.

          For example,

            <a data-href-field=link data-field=title></a>

          ... with /object/:

            {
              link: "https://example.com/",
              title: "Example Web Page",
            }

          ... is expanded as:

            <a data-href-field=link data-field=title
                href="https://example.com/">Example Web Page</a>

        An element with |data-/*/-template| attribute

          ... where /*/ is the *target attribute name* and is one of:
          |href|, |src|, |id|, |title|, |value|, |action|.

          The attribute whose name is the target attribute name is set
          to the result of processing the |data-/*/-template|
          attribute value as a value template.

          For example,

            <a data-href-template=https://example.com/{user_id}/{object_id}>

          ... with /object/:

            {
              user_id: 535555,
              object_id: 72534151,
            }

          ... is expanded as:

            <a data-href-template=https://example.com/{user_id}/{object_id}
                href="https://example.com/535555/72534151">

        An element with |data-enable-by-fill| attribute

          The |disabled| attribute, if specified, is removed.  This
          feature can be used to enable the submit button and other
          controls only after other fields are filled in.

    resultString = $fill.string (templateString, object)

      Return the result of processing the *value template*
      /templateString/ with /object/, i.e. a copy of /templateString/
      where any substring |{/field-name/}| is replaced by the field
      value for /field-name/ of /object/.

    The *field value* for /field/ of /object/ is the /field/ property
    value of /object/.  If /field/ contains a |.| character, the
    substring before the character is the property value and the
    remaining substring is interpreted as the field value recursively
    applied to that property value (If the property value is |null| or
    |undefined|, the result is |null|).  For example, field value for
    |abc.def.xyz| is the value of |object.abc.def.xyz|.

  |$promised| namespace

    promise = $promised.forEach ((item) => { return promise }, list)

      Iterate for each array item in /list/, in order, one after
      another.  The first argument to the |forEach| method is a
      |Function|, which is invoked with each item.  It can return a
      |Promise|, in such case the iteration is not over until the
      promise is fulfilled.  If the function throws, or if the
      function returns a promise which is rejected, the entire
      iteration fails and any remaining item is ignored.  The function
      returns a promise, which is fulfilled when the entire iteration
      is over, or rejected with the exception of the failed iteration.

    promise = $promised.map ((item) => { return promise }, list)
    
      Iterate for each array item in /list/, in order, one after
      another, in a similar way to the |forEach| method.  Unlike the
      |forEach| method, the function is expected to return a value
      (either a non-|Promise| value directly, or by returning a
      |Promise| and resolving it with a value).  The function returns
      a promise, which is fulfillwed with an |Array| of returned
      values of the iterations, in order.

* Definitions

The *definition* is an integration point with another script libraries
and the application.

A definition is represented by an element whose namespace URL is
<data:,pc>.  The definition's *type* is its local name.  The
definition can be registered by inserting the element into the head
element of the document.  There is no way to remove a definition.

The definition's *name* is its |name| attribute value.  A definition
must have a |name| attribute.  The name must be unique for its type.
Predefined names cannot be used as a name.

There are following definition types:

  filltype (string)

    A map entry for |$fill| handling.

  loader (handler)

    A handler for |list-container| element's loader.  It is expected
    to return an object (or a promise fulfulled with an object).

    The |this| value used when the handler is invoked is the
    |list-container| element.  The handler is invoked with the
    argument of the load options.

  filter (handler)

    A handler for |list-container| element's filter.  It is expected
    to return an object (or a promise fulfilled with an object).

    The |this| value used when the handler is invoked is the
    |list-container| element.  The handler is invoked with the
    argument of the result of the previous step.

  formsaved (handler)

    A formsaved handler for |form| element whose |is| is |save-data|.
    It can return a promise.

    The |this| value used when the handler is invoked is the |form|
    element.  The handler is invoked with the dictionary, as described
    in the |form[is-save-data]|'s documentation.

  formvalidator (handler)

    A custom form validator for |form| element whose |is| is
    |save-data|.  It can return a promise.

    The |this| value used when the handler is the |form| element.  The
    handler is invoked with the dictionary, as described in the
    |form[is-save-data]|'s documentation.

    If the result is valid (i.e. the form is ready to be submitted),
    the handler must return (or return a promise that is fulfilled).

    Otherwise, if the result is invalid, the handler must throw (or
    return a promise that is rejected).

  saver (handler)

    A form submission handler for |form| element whose |is| is
    |save-data|.  It is expected to return a |Response| object or
    equivalent, as described in the |form[is-save-data]|'s
    documentation.

    The |this| value used when the handler is the |form| element.

  templateselector (handler)

    A handler for template set's template selector.  It is expected to
    return a |template| element chosen from the argument.  (It cannot
    return a promise and cannot throw any exception.)

    The |this| value used when the handler is invoked is the template
    set.  The handler is invoked with two arguments: the candidate
    template map and the object for which a template should be chosen.
    Note that the template map (which is a JavaScript object used to
    represent name/value pairs) might be empty.

If a definition type is /handler/, it must have a handler.  The
*handler* of a definition is the |pcHandler| JavaScript property
value, which must be a JavaScript function.

If a definition type is /string/, it must have a content.  The
*content* of a definition is the |content| content attribute value.

There is a predefined loader: |src|.  It fetches the JSON file whose
URL is the |src| attribute value and returns the value for name
specified by the |key| attribute.  For example,

  <list-container src=data.json key=users>
    <template><p data-field=name></template>
    <list-main></list-main>
  </list-container>

  data.json:
  {
    "users": [
      ["name": "Hanako"}
    ]
  }

... will result in:

  <list-container src=data.json key=users>
    <template><p data-field=name></template>
    <list-main><list-item><p data-field=name>Hanako</p></list-item></list-main>
  </list-container>

There is a predefined filter: |default|.  It replaces the input's
|data| to the result of |Object.values (/input/.data)| if the input's
|data| is not a JavaScript |Array|.  It reverses the list if the
|list-container| element has the |reverse| attribute specified.

There are predefined formsaved handlers:

  go:{templateOfURL}

    Navigate to the URL specified as the first argument
    /templateOfURL/, processed as value template with form response
    interpreted as a JSON data.  Please note that /templateOfURL/
    cannot contain the |:| character (i.e. it cannot be an absolute
    URL) as it is the argument separator.

  reset

    Reset the form.

* Action statuses

Several elements support action statuses, i.e. they can contain zero
or more |action-status| elements as its descendants.  Such elements
are used to show the progress of actions.

The |hidden| content attribute is set to an action status element,
depending on whether a status should be shown to the user.

The |status| content attribute is set to |ok| if an action has
successfully completed, set to |ng| if an action has errorneously
completed, or left unset otherwise.

If an |action-status| element is empty when an action is started, its
content is filled by |action-status-message| and |progress| elements.

Any |progress| element descendants are used to show progress bars.  If
there is no ongoing action, the |hidden| content attribute is set.

Any |action-status-message| element descendants are used to show the
current status message.  If there is no useful message, the |hidden|
content attribute is set.

If an action has successfully completed, the |ok| content attribute
value of the element is set to the current status message, if any.

If an action has failed with an exception, the stringification of the
exception is set to the current status message.

If an action has entered in a stage, the |status-/stage/| content
attribute value, where /stage/ is the stage's name, is set to the
current status message, if any.

* Application-specific elements

An element's implementation can be defined by inserting an |element|
element in the <data:,pc> namespace whose property |pcDef|'s value is
the definition of the element into the |head| element.

  For example, the |my-element| element can be defined by the
  following code:

    var e = document.createElementNS ('data:,pc', 'element');
    e.pcDef = {
      name: 'my-element',
      props: {
        pcInit: function () {
          var myattr = this.getAttribute ('myattr');
          ...
        },
        myMethod: function () {
          ...
        },
      },
    };
    document.head.appendChild (e);

For an autonomous custom element (i.e. a custom element with its own
name), the definition's |name| must be specified to the element name.
For a customized built-in element (i.e. a standard HTML element with
the |is| attribute), the definition's |name| must be specified to the
element name and the definition's |is| must be specified to the |is|
attribute value.  Any element inserted into the document before or
after the definition is initialized as specified by the definition.

The definition has following name/value pairs:

  name (string, required)

    The element name.

  is (string)

    The |is| attribute value.  This field must be specified if |name|
    does not have |-| in its value.  This value must have |-| in its
    value.

  props (dictionary)

    The additional properties for the element.  The properties
    specified here are copied into the element when the element is
    initialized.

    If there is a |pcInit| property, the |pcInit| method of the
    element is invoked upon initialization.

  templateSet (boolean)

    If the value is true, the element is initialized as a template set
    just before any |pcInit| method is invoked.  The element's content
    attributes |template| and |templateselector|, as well as its
    |template| element children, are interpreted as part of the
    template set for the element.  (Note that |template| and
    |templateselector| attributes must be set before this function is
    invoked.)  This option is only available to autonomous custom
    elements (i.e. when |name| is specified but |is| is not
    specified).

    A |pctemplatesetupdated| event is fired at the element whenever
    its template set's definition is updated such that any content
    created using the template might need to be updated.  The event is
    fired with an event object whose |pcTemplateSet| property is the
    template set for the element.  (Note that the |pcTemplateSet|
    value might not be the same object as the element when the
    |template| attribute is specified.)

    A template set object has the |createFromTemplate| element, which
    returns an element created from the selected template.  The method
    requires two arguments: the name of the element to be created and
    the object used to select and to fill (by |$fill|) the template.

* Development

To run a Web server for development and testing:

  $ ./lserver

... and then open the URL shown in the browser.

* Author

Wakaba <wakaba@suikawiki.org>.

* License

Copyright 2017-2018 Wakaba <wakaba@suikawiki.org>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Affero General Public License for more details.

You does not have received a copy of the GNU Affero General Public
License along with this program, see <https://www.gnu.org/licenses/>.
